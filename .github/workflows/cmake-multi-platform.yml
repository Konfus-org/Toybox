# This workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        include:
          # Windows build using MSVC
          - os: windows-latest
            build_type: Release
            c_compiler: cl
            cpp_compiler: cl
          # Linux build using GCC
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          # Linux build using Clang
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      
    - name: Set Inputs
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev libwayland-dev libxkbcommon-dev

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Clean build dir (bash on Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: rm -rf "${{ steps.strings.outputs.build-output-dir }}"

    - name: Clean build dir
      if: runner.os != 'Windows'
      run: rm -rf ${{ steps.strings.outputs.build-output-dir }}

    # Uncomment and modify as needed when we need to debug repo contents
    # - name: Debug repo contents
    #   run: |
    #     git submodule status || true
    #     ls -la
    #     ls -la Plugins || true
    #     ls -la Plugins/Toybox-OpenGL-Rendering-Plugin || true
    #     ls -la Plugins/Toybox-SDL-Input-Plugin || true

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Log CMake Failure
      if: failure()
      run: |
        echo "===== CMakeOutput.log ====="
        cat ${{ steps.strings.outputs.build-output-dir }}/CMakeFiles/CMakeOutput.log || true
        echo "===== CMakeError.log ====="
        cat ${{ steps.strings.outputs.build-output-dir }}/CMakeFiles/CMakeError.log || true
        - name: Build
          # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
          run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Run Tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
