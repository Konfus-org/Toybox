name: CI (Premake)

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

# Adjust these for your project layout
env:
  PREMAKE_VERSION: "5.0.0-beta2"   # pin the premake version you want
  PREMAKE_SCRIPT: "premake5.lua"   # path to your premake script
  BUILD_DIR: "build"               # where premake puts generated files
  WORKSPACE_NAME: "MyWorkspace"    # your premake workspace() name

jobs:
  build:
    name: ${{ matrix.os }} / ${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        config: [ Debug, Release ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive  # if you use submodules

      # ---------- Download & cache Premake ----------
      - name: Cache Premake
        id: cache-premake
        uses: actions/cache@v4
        with:
          path: premake-bin
          key: premake-${{ env.PREMAKE_VERSION }}-${{ runner.os }}

      - name: Download Premake
        if: steps.cache-premake.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -e
          mkdir -p premake-bin
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            curl -L -o premake.zip https://github.com/premake/premake-core/releases/download/v${PREMAKE_VERSION}/premake-${PREMAKE_VERSION}-windows.zip
            powershell -command "Expand-Archive premake.zip -DestinationPath premake-bin"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            curl -L -o premake.tar.gz https://github.com/premake/premake-core/releases/download/v${PREMAKE_VERSION}/premake-${PREMAKE_VERSION}-macosx.tar.gz
            tar -xzf premake.tar.gz -C premake-bin
          else
            curl -L -o premake.tar.gz https://github.com/premake/premake-core/releases/download/v${PREMAKE_VERSION}/premake-${PREMAKE_VERSION}-linux.tar.gz
            tar -xzf premake.tar.gz -C premake-bin
          fi

      - name: Make premake executable (non-Windows)
        if: runner.os != 'Windows'
        run: chmod +x premake-bin/premake5

      - name: Premake version
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./premake-bin/premake5.exe --version
          else
            ./premake-bin/premake5 --version
          fi

      # ---------- Platform build prereqs ----------
      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          # Ensure command line tools exist; Xcode is present on macOS runners
          sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer || true

      - name: Setup MSBuild (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      # ---------- Generate projects with Premake ----------
      - name: Generate projects (Windows - vs2022)
        if: runner.os == 'Windows'
        run: ./premake-bin/premake5.exe --file="${{ env.PREMAKE_SCRIPT }}" vs2022

      - name: Generate projects (Linux/macOS - gmake2)
        if: runner.os != 'Windows'
        run: ./premake-bin/premake5 --file="${{ env.PREMAKE_SCRIPT }}" gmake2

      # ---------- Build ----------
      - name: Build (Windows / MSBuild)
        if: runner.os == 'Windows'
        run: |
          # Solution path assumes you set location("%{wks.location}") to $BUILD_DIR in your premake
          $SLN = "${{ env.BUILD_DIR }}\${{ env.WORKSPACE_NAME }}.sln"
          if (!(Test-Path $SLN)) { Get-ChildItem -Recurse -Filter *.sln }
          msbuild $SLN /m /p:Configuration=${{ matrix.config }}

      - name: Build (Linux/macOS / make)
        if: runner.os != 'Windows'
        working-directory: ${{ env.BUILD_DIR }}
        run: make config=${{ matrix.config }} -j$(getconf _NPROCESSORS_ONLN)

      # ---------- (Optional) Run tests ----------
      # Replace with your real test command/binary
      - name: Run tests (example)
        continue-on-error: false
        run: |
          echo "Run your unit tests here, e.g.:"
          echo "./bin/${{ matrix.config }}/your_tests"

      # ---------- Upload artifacts ----------
      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.config }}-artifacts
          path: |
            bin/**/*
            ${{ env.BUILD_DIR }}/**/*.log
          if-no-files-found: ignore
