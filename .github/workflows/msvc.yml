# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#
# Find more information at:
# https://github.com/microsoft/msvc-code-analysis-action

name: Microsoft C++ Code Analysis

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '.github/labeler.yml'
      - '**/*.md'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '.github/labeler.yml'
      - '**/*.md'
  schedule:
    - cron: '45 12 * * 0'

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/build'
  # Configuration to use for multi-config generators like Visual Studio
  config: Release

permissions:
  contents: read
  issues: write

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      issues: write # required to open issues with analysis findings
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Configure CMake
        run: cmake -B ${{ env.build }} -S ${{ github.workspace }}

      # Build is required generated source files are used
      - name: Build CMake
        run: cmake --build ${{ env.build }} --config ${{ env.config }}

      # Run
      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@v0.1.1
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          buildConfiguration: ${{ env.config }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset
          # Paths to ignore analysis of CMake targets and includes
          ignoredPaths: ${{ github.workspace }}/Dependencies

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}

      - name: Create issue for MSVC analysis findings
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const sarifPath = '${{ steps.run-analysis.outputs.sarif }}';
            const sarif = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
            const results = sarif.runs.flatMap(run => run.results ?? []);

            if (results.length === 0) {
              core.info('No MSVC Code Analysis findings detected.');
              return;
            }

            const title = `MSVC Code Analysis findings (workflow run ${context.runId})`;
            const issueSearch = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} is:issue "${title}" in:title state:open`
            });

            if (issueSearch.data.total_count > 0) {
              core.info('An open issue already exists for this workflow run.');
              return;
            }

            const lines = [
              'MSVC Code Analysis detected the following issues:',
              '',
              ...results.slice(0, 20).map(result => {
                const message = result.message?.text ?? 'No message provided';
                const rule = result.ruleId ?? 'Unknown rule';
                const level = result.level ?? 'warning';
                return `- (${level}) ${message} [${rule}]`;
              }),
              '',
              `Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              'View the attached SARIF artifact for the complete list of findings.'
            ];

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body: lines.join('\n')
            });
